---
import getModels from "@/lib/getModels";

export async function getStaticPaths() {
  const models = await getModels();
  return models.map((model) => ({ params: { model } }));
}

const modelUrl = `/models/${Astro.params.model}`;
---

<!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>3D Model - {modelUrl}</title>
    <style>
      body {
        margin: 0;
      }
    </style>
  </head>
  <body>
    <div id="modelUrl" style="display: none;">{modelUrl}</div>
    <script>
      import * as THREE from "three";

      import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader";
      import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";

      // hack to get model URL passed from Astro to page
      const modelUrl = document.getElementById("modelUrl").innerText;

      let camera, scene, renderer, controls;
      let spotLight, bbox, ground;

      init();
      animate();

      function processModel(model) {
        const scale = 100;
        model.quaternion.setFromEuler(new THREE.Euler(-Math.PI / 2, 0, 0)); // z-up conversion
        model.scale.set(scale, scale, scale);
        model.traverse((o) => {
          if (o.isMesh) {
            o.receiveShadow = true;
            o.castShadow = true;
          }
        });

        // center model
        const center = new THREE.Vector3();

        bbox = new THREE.Box3().setFromObject(model);
        bbox.getCenter(center).negate();
        const newScale = 100;
        model.position.set(center.x, center.y, center.z);
        model.scale.set(newScale, newScale, newScale);

        // zoom to model extents
        // get the max side of the bounding box (fits to width OR height as needed )
        // const buffer = 1.25;
        // const size = bbox.getSize();
        // const maxDim = Math.max(size.x, size.y, size.z);
        // const fov = camera.fov * (Math.PI / 180);
        // let cameraZ = Math.abs((maxDim / 4) * Math.tan(fov * 2));
        // cameraZ *= buffer; // zoom out a little so that objects don't fill the screen

        // camera.position.z = cameraZ;

        // const minZ = bbox.min.z;
        // const cameraToFarEdge = minZ < 0 ? -minZ + cameraZ : cameraZ - minZ;

        // camera.far = cameraToFarEdge * 3;
        // camera.updateProjectionMatrix();

        return model;
      }

      function init() {
        scene = new THREE.Scene();
        scene.background = new THREE.Color(0xa0a0a0);
        scene.fog = new THREE.Fog(0xa0a0a0, 10, 500);

        // camera
        const aspect = window.innerWidth / window.innerHeight;
        camera = new THREE.PerspectiveCamera(35, aspect, 1, 500);
        camera.position.set(-50, 40, 50);
        scene.add(camera);

        // axes helper
        const axesHelper = new THREE.AxesHelper(20);
        // scene.add(axesHelper);

        const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444, 1);
        hemiLight.position.set(0, 100, 0);
        scene.add(hemiLight);

        spotLight = new THREE.SpotLight(0xffffff, 0.2);
        spotLight.position.set(-50, 50, 50);
        spotLight.penumbra = 0;

        spotLight.castShadow = true;
        spotLight.shadow.bias = -0.0001;
        spotLight.shadow.mapSize.width = 1024 * 4;
        spotLight.shadow.mapSize.height = 1024 * 4;
        scene.add(spotLight);

        const manager = new THREE.LoadingManager();

        // import model
        new GLTFLoader(manager).load(
          modelUrl,
          function (gltf) {
            const model = processModel(gltf.scene);
            scene.add(model);
          },
          function (xhr) {
            console.log((xhr.loaded / xhr.total) * 100 + "% loaded");
          },
          function (err) {
            console.error(err);
          }
        );

        // render once model loads
        manager.onLoad = function () {
          render();
        };

        // ground
        ground = new THREE.Mesh(
          new THREE.PlaneGeometry(1000, 1000),
          new THREE.MeshPhongMaterial({ color: 0x999999, depthWrite: false })
        );
        ground.rotation.x = -Math.PI / 2;
        ground.position.y = -50;
        ground.receiveShadow = true;
        scene.add(ground);

        // renderer
        renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.outputEncoding = THREE.sRGBEncoding;
        renderer.shadowMap.enabled = true;
        renderer.shadowMap.type = THREE.PCFSoftShadowMap;
        document.body.appendChild(renderer.domElement);

        // orbit controls
        controls = new OrbitControls(camera, renderer.domElement);
        controls.addEventListener("change", render);
        controls.minDistance = 50;
        controls.maxDistance = 200;
        controls.enablePan = false;
        controls.enableZoom = false;
        controls.target.set(0, 0, 0);
        controls.autoRotate = true;

        window.addEventListener("resize", onWindowResize);
        render();
      }

      function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize(window.innerWidth, window.innerHeight);

        render();
      }

      function animate() {
        spotLight.position.set(
          camera.position.x + 50,
          camera.position.y + 10,
          camera.position.z - 50
        );

        // place ground below model
        ground.position.y = bbox ? bbox.min.y : -50;

        controls.update();
        render();
        requestAnimationFrame(animate);
      }

      function render() {
        renderer.render(scene, camera);
      }
    </script>
  </body>
</html>
