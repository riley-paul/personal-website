<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>My first three.js app</title>
    <style>
      body {
        margin: 0;
      }
    </style>
  </head>
  <body>
    <!-- <script src="/js/three.js" is:inline></script> -->
    <script>
      import * as THREE from "three";

      import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader";
      import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";

      let camera, scene, renderer, pivot;

      init();

      function init() {
        scene = new THREE.Scene();
        scene.background = new THREE.Color(0xa0a0a0);
        scene.fog = new THREE.Fog(0xa0a0a0, 10, 500);

        camera = new THREE.PerspectiveCamera(
          35,
          window.innerWidth / window.innerHeight,
          1,
          500
        );
        camera.position.set(-50, 40, 50);
        scene.add(camera);

        //

        const axesHelper = new THREE.AxesHelper(20);
        scene.add(axesHelper);

        const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444);
        hemiLight.position.set(0, 100, 0);
        scene.add(hemiLight);

        const dirLight = new THREE.DirectionalLight(0xffffff);
        dirLight.position.set(-0, 40, 50);
        dirLight.castShadow = true;
        dirLight.shadow.camera.top = 50;
        dirLight.shadow.camera.bottom = -25;
        dirLight.shadow.camera.left = -25;
        dirLight.shadow.camera.right = 25;
        dirLight.shadow.camera.near = 0.1;
        dirLight.shadow.camera.far = 200;
        dirLight.shadow.mapSize.set(1024, 1024);
        scene.add(dirLight);

        // scene.add( new THREE.CameraHelper( dirLight.shadow.camera ) );

        //

        const manager = new THREE.LoadingManager();

        // const loader = new ThreeMFLoader(manager);
        // loader.load("./models/3mf/truck.3mf", function (object) {
        //   object.quaternion.setFromEuler(new THREE.Euler(-Math.PI / 2, 0, 0)); // z-up conversion

        //   object.traverse(function (child) {
        //     child.castShadow = true;
        //   });

        //   scene.add(object);
        // });

        new GLTFLoader(manager).load(
          "models/RC_tank.gltf",
          function (gltf) {
            const model = gltf.scene;

            const scale = 0.1;
            model.quaternion.setFromEuler(new THREE.Euler(-Math.PI / 2, 0, 0)); // z-up conversion
            model.scale.set(scale, scale, scale);
            model.traverse((o) => (o.castShadow = true));

            const bbox = new THREE.Box3().setFromObject(model);
            const offset = new THREE.Vector3();
            bbox.getCenter(offset).negate();
            model.position.set(offset.x, offset.y, offset.z);

            pivot = new THREE.Group()
            pivot.add(model)
            scene.add(pivot);
          },
          function (xhr) {
            console.log((xhr.loaded / xhr.total) * 100 + "% loaded");
          },
          function (err) {
            console.error(err);
          }
        );
        //

        manager.onLoad = function () {
          render();
        };
        //

        const ground = new THREE.Mesh(
          new THREE.PlaneGeometry(1000, 1000),
          new THREE.MeshPhongMaterial({ color: 0x999999, depthWrite: false })
        );

        ground.rotation.x = -Math.PI / 2;
        ground.position.y = 11;
        ground.receiveShadow = true;
        scene.add(ground);

        //

        renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.outputEncoding = THREE.sRGBEncoding;
        renderer.shadowMap.enabled = true;
        renderer.shadowMap.type = THREE.PCFSoftShadowMap;
        document.body.appendChild(renderer.domElement);

        //

        const controls = new OrbitControls(camera, renderer.domElement);
        controls.addEventListener("change", render);
        controls.minDistance = 50;
        controls.maxDistance = 200;
        controls.enablePan = false;
        controls.target.set(0, 0, 0);
        controls.update();

        window.addEventListener("resize", onWindowResize);
        render();
      }

      function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize(window.innerWidth, window.innerHeight);

        render();
      }

      function render() {
        renderer.render(scene, camera);
      }
    </script>
  </body>
</html>
